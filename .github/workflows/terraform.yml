name: Terraform Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: "Destruir infraestrutura"
        type: boolean
        required: true
        default: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    # S√≥ executa se n√£o for uma destrui√ß√£o manual
    if: github.event_name != 'workflow_dispatch' || !github.event.inputs.destroy

    steps:
      # 1. Checkout do c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar o AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Instalar o Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 4. Inicializar o Terraform
      - name: Terraform Init
        run: terraform init

      # 5. Validar a configura√ß√£o do Terraform
      - name: Terraform Validate
        run: terraform validate

      # 6. Planejar as mudan√ßas
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # 7. Aplicar as mudan√ßas (opcional, apenas em `main`)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

  cleanup:
    name: "Cleanup em caso de falha"
    needs: terraform
    if: ${{ failure() }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Listar recursos antes do destroy
        run: |
          echo "üîç Recursos que ser√£o destru√≠dos:"
          terraform state list || true
        continue-on-error: true

      - name: Terraform Destroy
        run: |
          echo "‚ö†Ô∏è Iniciando destrui√ß√£o dos recursos..."
          for i in {1..3}; do
            echo "Tentativa $i de 3..."
            if terraform destroy -auto-approve; then
              echo "‚úÖ Destroy realizado com sucesso!"
              exit 0
            fi
            echo "‚ùå Tentativa $i falhou. Aguardando 30 segundos..."
            sleep 30
          done
          echo "‚ùå Todas as tentativas de destroy falharam"
          exit 1

      - name: Verificar destrui√ß√£o
        run: |
          if terraform state list 2>/dev/null; then
            echo "‚ö†Ô∏è Ainda existem recursos no estado do Terraform!"
            terraform state list
            exit 1
          else
            echo "‚úÖ Todos os recursos foram destru√≠dos com sucesso!"
          fi
        continue-on-error: true

  destroy:
    name: "Destruir Infraestrutura"
    runs-on: ubuntu-latest
    # S√≥ executa quando acionado manualmente com destroy=true
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy

    environment: production # Requer aprova√ß√£o manual

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Listar recursos a serem destru√≠dos
        run: |
          echo "üîç Recursos que ser√£o destru√≠dos:"
          terraform state list || true
          terraform plan -destroy
        continue-on-error: true

      - name: Confirmar destrui√ß√£o
        run: |
          echo "‚ö†Ô∏è ATEN√á√ÉO: Voc√™ est√° prestes a destruir toda a infraestrutura!"
          echo "Esta a√ß√£o n√£o pode ser desfeita."
          sleep 10

      - name: Terraform Destroy
        run: |
          echo "üö® Iniciando destrui√ß√£o da infraestrutura..."
          terraform destroy -auto-approve

      - name: Verificar destrui√ß√£o
        run: |
          if terraform state list 2>/dev/null; then
            echo "‚ö†Ô∏è Ainda existem recursos no estado do Terraform!"
            terraform state list
            exit 1
          else
            echo "‚úÖ Todos os recursos foram destru√≠dos com sucesso!"
          fi

      - name: Notificar conclus√£o
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const message = status === 'success' 
              ? '‚úÖ Infraestrutura destru√≠da com sucesso!'
              : '‚ùå Falha ao destruir a infraestrutura';

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.name,
              title: `${message}`,
              body: `
              Status da destrui√ß√£o: ${status}
              
              - Workflow: ${context.workflow}
              - Run ID: ${context.runId}
              - Iniciado por: ${context.actor}
              - Data/Hora: ${new Date().toISOString()}
              
              ${status !== 'success' ? 'Por favor, verifique os logs do workflow para mais detalhes.' : ''}
              `
            });
